/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package WebRequirementsMetamodel.provider;

import WebRequirementsMetamodel.util.WebRequirementsMetamodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WebRequirementsMetamodelItemProviderAdapterFactory extends WebRequirementsMetamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WebRequirementsMetamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.SD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SDItemProvider sdItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.SD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSDAdapter() {
		if (sdItemProvider == null) {
			sdItemProvider = new SDItemProvider(this);
		}

		return sdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.SR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SRItemProvider srItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.SR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSRAdapter() {
		if (srItemProvider == null) {
			srItemProvider = new SRItemProvider(this);
		}

		return srItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Belief} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeliefItemProvider beliefItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Belief}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeliefAdapter() {
		if (beliefItemProvider == null) {
			beliefItemProvider = new BeliefItemProvider(this);
		}

		return beliefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Softgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftgoalItemProvider softgoalItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Softgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftgoalAdapter() {
		if (softgoalItemProvider == null) {
			softgoalItemProvider = new SoftgoalItemProvider(this);
		}

		return softgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Content} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentItemProvider contentItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Content}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentAdapter() {
		if (contentItemProvider == null) {
			contentItemProvider = new ContentItemProvider(this);
		}

		return contentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.WebRequirements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebRequirementsItemProvider webRequirementsItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.WebRequirements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebRequirementsAdapter() {
		if (webRequirementsItemProvider == null) {
			webRequirementsItemProvider = new WebRequirementsItemProvider(this);
		}

		return webRequirementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Navigational} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationalItemProvider navigationalItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Navigational}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationalAdapter() {
		if (navigationalItemProvider == null) {
			navigationalItemProvider = new NavigationalItemProvider(this);
		}

		return navigationalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Personalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonalizationItemProvider personalizationItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Personalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonalizationAdapter() {
		if (personalizationItemProvider == null) {
			personalizationItemProvider = new PersonalizationItemProvider(this);
		}

		return personalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Layout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutItemProvider layoutItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Layout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutAdapter() {
		if (layoutItemProvider == null) {
			layoutItemProvider = new LayoutItemProvider(this);
		}

		return layoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Decomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecompositionItemProvider decompositionItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Decomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecompositionAdapter() {
		if (decompositionItemProvider == null) {
			decompositionItemProvider = new DecompositionItemProvider(this);
		}

		return decompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.MeansEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeansEndItemProvider meansEndItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.MeansEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeansEndAdapter() {
		if (meansEndItemProvider == null) {
			meansEndItemProvider = new MeansEndItemProvider(this);
		}

		return meansEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.Contribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContributionItemProvider contributionItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.Contribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContributionAdapter() {
		if (contributionItemProvider == null) {
			contributionItemProvider = new ContributionItemProvider(this);
		}

		return contributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebRequirementsMetamodel.IDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IDependencyItemProvider iDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link WebRequirementsMetamodel.IDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIDependencyAdapter() {
		if (iDependencyItemProvider == null) {
			iDependencyItemProvider = new IDependencyItemProvider(this);
		}

		return iDependencyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sdItemProvider != null) sdItemProvider.dispose();
		if (srItemProvider != null) srItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (beliefItemProvider != null) beliefItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (softgoalItemProvider != null) softgoalItemProvider.dispose();
		if (contentItemProvider != null) contentItemProvider.dispose();
		if (webRequirementsItemProvider != null) webRequirementsItemProvider.dispose();
		if (navigationalItemProvider != null) navigationalItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (personalizationItemProvider != null) personalizationItemProvider.dispose();
		if (layoutItemProvider != null) layoutItemProvider.dispose();
		if (decompositionItemProvider != null) decompositionItemProvider.dispose();
		if (meansEndItemProvider != null) meansEndItemProvider.dispose();
		if (contributionItemProvider != null) contributionItemProvider.dispose();
		if (iDependencyItemProvider != null) iDependencyItemProvider.dispose();
	}

}
